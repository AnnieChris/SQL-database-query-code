CREATE TABLE PORTAL_USER(
	USER_ID varchar(10) PRIMARY KEY,
	NAME varchar(50) NOT NULL,
	EMAIL varchar(30) NOT NULL,
	PASSWORD varchar(20) NOT NULL,
	ADDRESS varchar(100) NULL,
	REG_DATE datetime NULL,
	PHONE INT NULL,
	UPLOAD_PHOTO varchar(120) NULL
);

CREATE TABLE CONTACT(
	CONTACT_ID varchar(10) PRIMARY KEY,
	USER_ID varchar(10),
	NAME varchar(50) NOT NULL,
	EMAIL varchar(30) NULL,
	MESSAGE varchar(20) NULL,
	PHONE INT NULL
);
ALTER TABLE CONTACT  ADD  CONSTRAINT FK_CONTACT_USER FOREIGN KEY(USER_ID)
REFERENCES PORTAL_USER (USER_ID);

CREATE TABLE FEEDBACK(
	FEEDBACK_ID varchar(10) PRIMARY KEY,
	USER_ID varchar(10),
	NAME varchar(50) NOT NULL,
	EMAIL varchar(30) NULL,
	FEEDBACK varchar(350) NULL
);
ALTER TABLE FEEDBACK ADD  CONSTRAINT FK_FEEDBACK_USER FOREIGN KEY(USER_ID)
REFERENCES PORTAL_USER (USER_ID);

CREATE TABLE ADMIN(
	ADMIN_ID varchar(10) PRIMARY KEY,
	NAME varchar(50) NOT NULL,
	EMAIL varchar(30) NULL,
	PASSWORD varchar(20) NOT NULL
);

CREATE TABLE COURSE(
	COURSE_ID varchar(10) PRIMARY KEY,
	ADMIN_ID varchar(10),
	COURSE_NAME varchar(50) NOT NULL,
	COURSE_RESOURCE varchar(150) NULL,
	COURSE_DESC varchar(150) NULL,	
	COURSE_FEE INT
);
ALTER TABLE COURSE ADD  CONSTRAINT FK_COURSE_ADMIN FOREIGN KEY(ADMIN_ID)
REFERENCES ADMIN (ADMIN_ID);

CREATE TABLE USER_COURSE(
	COURSE_ID varchar(10),
	USER_ID varchar(10),
	STATUS varchar(10)
);
ALTER TABLE USER_COURSE ADD  CONSTRAINT FK_USER_COURSE_COURSE FOREIGN KEY(COURSE_ID)
REFERENCES COURSE (COURSE_ID);
ALTER TABLE USER_COURSE ADD  CONSTRAINT FK_USER_COURSE_USER FOREIGN KEY(USER_ID)
REFERENCES PORTAL_USER (USER_ID);

----------------------sample data-----------------------------------------

INSERT INTO PORTAL_USER (USER_ID, NAME, EMAIL, PASSWORD, ADDRESS, REG_DATE, PHONE, UPLOAD_PHOTO) VALUES('ANNIE','Annie Esther Wilson', 'annie@mars.com', 'test123', 'Waukesha, WI', '04/10/2022', 1234567890, '/test/test.jpg');

INSERT INTO CONTACT (CONTACT_ID, USER_ID, NAME, EMAIL, MESSAGE, PHONE) VALUES('THOMAS','ANNIE', 'Thomas A','Thomas@gmail.com', 'friend', 1234567890);
INSERT INTO CONTACT (CONTACT_ID, USER_ID, NAME, EMAIL, MESSAGE, PHONE) VALUES('VICTOR','ANNIE', 'Victor P','Victor@gmail.com', 'relative', 1234567890);

INSERT INTO FEEDBACK (FEEDBACK_ID, USER_ID, NAME, EMAIL, FEEDBACK) VALUES('FEED_001','ANNIE', 'Annie Esther Wilson','annie@mars.com', 'Course navigation is not user friendly');
INSERT INTO FEEDBACK (FEEDBACK_ID, USER_ID, NAME, EMAIL, FEEDBACK) VALUES('FEED_002','ANNIE', 'Annie Esther Wilson','annie@mars.com', 'Test Feedback');

INSERT INTO ADMIN(ADMIN_ID, NAME, EMAIL, PASSWORD) VALUES('STEPHEN', 'Stephen T', 'stephen@mars.com', 'testpass');

INSERT INTO COURSE(COURSE_ID, ADMIN_ID, COURSE_NAME, COURSE_RESOURCE, COURSE_DESC, COURSE_FEE) VALUES ('COURSE_01', 'STEPHEN', 'JAVA_01', '/test/test.pdf', 'Basic Java Training', '200');
INSERT INTO COURSE(COURSE_ID, ADMIN_ID, COURSE_NAME, COURSE_RESOURCE, COURSE_DESC, COURSE_FEE) VALUES ('COURSE_02', 'STEPHEN', 'WEB_01', '/test/test.pdf', 'Web Training', '250');


INSERT INTO USER_COURSE(COURSE_ID, USER_ID, STATUS) VALUES ('COURSE_01','ANNIE', 'ENROLLED');
INSERT INTO USER_COURSE(COURSE_ID, USER_ID, STATUS) VALUES ('COURSE_02','ANNIE', 'COMPLETED');



------------------------sample queries------------------------------

--GET ALL USERS
SELECT USER_ID, NAME, EMAIL, PASSWORD, ADDRESS, REG_DATE, PHONE, UPLOAD_PHOTO FROM PORTAL_USER;

--GET CONTACTS OF USER ANNIE
SELECT PO.NAME, CO.NAME AS CONTACT_NAME, CO.EMAIL, CO.MESSAGE FROM CONTACT CO INNER JOIN PORTAL_USER PO ON  CO.USER_ID=PO.USER_ID WHERE PO.USER_ID='ANNIE';

--GET FEEDBACKS OF USER ANNIE
SELECT FE.NAME, FE.EMAIL, FE.FEEDBACK FROM FEEDBACK FE WHERE FE.USER_ID='ANNIE';

--GET ALL ADMINS
SELECT ADMIN_ID, NAME, EMAIL, PASSWORD FROM ADMIN;

--GET ALL COURSES
SELECT COURSE_ID, COURSE_NAME, COURSE_RESOURCE, COURSE_DESC, COURSE_FEE FROM COURSE;

--GET ALL COURSES CREATED BY ADMIN STEPHER
SELECT COURSE_ID, COURSE_NAME, COURSE_RESOURCE, COURSE_DESC, COURSE_FEE FROM COURSE WHERE ADMIN_ID='STEPHEN';

--GET ALL COURSES ASSIGNED FOR ANNIE
SELECT CO.COURSE_NAME, CO.COURSE_DESC, CO.COURSE_FEE FROM COURSE CO INNER JOIN USER_COURSE UC ON UC.COURSE_ID=CO.COURSE_ID WHERE UC.USER_ID='ANNIE' ;

--GET ALL COURSES COMPLETED BY ANNIE
SELECT CO.COURSE_NAME, CO.COURSE_DESC, CO.COURSE_FEE FROM COURSE CO INNER JOIN USER_COURSE UC ON UC.COURSE_ID=CO.COURSE_ID WHERE UC.USER_ID='ANNIE' AND UC.STATUS='COMPLETED';